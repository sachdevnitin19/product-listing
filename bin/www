#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('property-listing:server');
const http = require('http');
const Promise = require('bluebird');
const mongoose = require('mongoose');

/**
 * Get port from environment and store in Express.
 */

const port = process.env.PORT || '3000';
app.set('port', port);

/*
 +++++++++++++++++++++++++++++++
 +    DATABASE CONNECTION      +
 +++++++++++++++++++++++++++++++
 */
const options = {
    promiseLibrary: Promise,
    useNewUrlParser: true,
    reconnectTries: 10,
    reconnectInterval: 500, // Reconnect every 500ms
};

const MONGO_URL = 'mongodb://admin:admin123@ds221339.mlab.com:21339/property-listing';

let connectWithRetry = () => {
    console.log('trying to connect to mongodb');
    mongoose.connect(MONGO_URL, options).then(() => {
        console.log('MongoDB is connected');
        startServer();
    }).catch(err => {
        console.error('MongoDB connection unsuccessful, retry after 5 seconds.');
        console.error(err);
        setTimeout(connectWithRetry, 5000)
    })
};

connectWithRetry();
/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const startServer = () => {
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port, function () {
        console.log(`server start on PORT ${port}.`)
    });
    /**
     * Attach event handlers
     */
    server.on('error', onError);
    server.on('listening', onListening);
};


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Express server listening on ' + bind);
}